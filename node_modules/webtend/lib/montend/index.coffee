###*!
* Copyright(c) 2012 vicanso 腻味
* MIT Licensed
###

_ = require 'underscore'

Client = require './client'
logger = console

noop = () ->

class Montend
  constructor : () ->
    @client = new Client()
  setConfig : (config) ->
    if config.disableLog
      @client.disableLog()
    else if config.logger
      logger = config.logger
      @client.setLogger logger
    if config.redisClient
      @client.queryCache config.redisClient
    if config.logQueryTime
      @client.logQueryTime()
  createConnection : (uri, options, cbf = noop) ->
    if _.isFunction options
      cbf = options
      options = null
    @client.init uri, options, cbf
  isInitDb : (dbName) ->
    if @client.db dbName
      return true
    else
      return false
  getClient : (dbName) ->
    self = @
    client = {}
    unwrapFunctions = ['getClient', 'createConnection', 'isInitDb', 'setConfig']
    _.each _.functions(self), (funcName) ->
      if _.indexOf(unwrapFunctions, funcName) == -1
        client[funcName] = (args...) ->
          args.unshift dbName
          self[funcName].apply self, args
    return client
  find : (dbName, collectionName, query, fields, options, cbf = noop) ->
    self = @
    args = _.toArray arguments
    argsTotal = args.length
    if argsTotal < 6
        cbf = args.pop()
    if argsTotal == 6
        if _.isObject fields
            newOptions = fields
            fields = options
            options = newOptions
    else if argsTotal ==5
        if _.isObject fields
            options = fields
            fields = null
        else
            options = {}
    else if argsTotal == 4
        fields = null
        options = {}
    fields = convertFileds fields
    options.limit ?= 30
    # cbf = _.wrap cbf, (func, err, data) ->
    #   if err
    #     func err
    #   else
    #     data.toArray func
    self.client.handle dbName, collectionName, 'find', query, fields, options, cbf
  count : (dbName, collectionName, query, cbf = noop) ->
    if _.isFunction query
      cbf = query
      query = {}
    @client.handle dbName, collectionName, 'count', query, cbf    


###*
 * convertFileds 将fields转换
 * @param  {String, Object} fields 查询结果返回的字段（字符串以空格分隔）
 * @return {Object} 返回转换后的查询字段格式
###
convertFileds = (fields) ->
  if !fields
    return {}
  else if _.isObject fields
    return fields
  else
    newFields = {}
    _.each fields.split(' '), (field) ->
      newFields[field] = true
    return newFields



module.exports = new Montend()